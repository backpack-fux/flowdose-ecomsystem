#!/bin/bash

# Help function
function show_help {
  echo "Usage: ./deploy.sh [options]"
  echo "Options:"
  echo "  -e, --environment ENV    Set environment (staging or production)"
  echo "  -t, --token TOKEN        DigitalOcean API token"
  echo "  -d, --domain DOMAIN      Domain name (optional)"
  echo "  -a, --admin-email EMAIL  Admin email for Let's Encrypt certificates"
  echo "  -k, --ssh-key PATH       Path to SSH private key (default: ~/.ssh/flowdose-do)"
  echo "  -h, --help               Display this help message"
  exit 0
}

# Default values
ENVIRONMENT="production"
DOMAIN=""
ADMIN_EMAIL="admin@yourdomain.com"
SSH_KEY_PATH="~/.ssh/flowdose-do"
POSTGRES_DB_ID="your-postgres-db-id-here"  # Your PostgreSQL database ID
REDIS_DB_ID="your-redis-db-id-here"        # Your Redis database ID
JWT_SECRET="your-jwt-secret-here"          # Secret for JWT tokens
COOKIE_SECRET="your-cookie-secret-here"    # Secret for cookies

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -e|--environment)
      ENVIRONMENT="$2"
      shift 2
      ;;
    -t|--token)
      DO_TOKEN="$2"
      shift 2
      ;;
    -d|--domain)
      DOMAIN="$2"
      shift 2
      ;;
    -a|--admin-email)
      ADMIN_EMAIL="$2"
      shift 2
      ;;
    -k|--ssh-key)
      SSH_KEY_PATH="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
done

# Check required parameters
if [ -z "$DO_TOKEN" ]; then
  echo "Error: DigitalOcean API token is required. Use -t or --token."
  exit 1
fi

# If domain is set, make sure admin email is also set
if [ ! -z "$DOMAIN" ] && [ "$ADMIN_EMAIL" == "admin@yourdomain.com" ]; then
  read -p "Domain is set. Please enter an email for Let's Encrypt certificates (default: admin@yourdomain.com): " ADMIN_EMAIL_INPUT
  if [ ! -z "$ADMIN_EMAIL_INPUT" ]; then
    ADMIN_EMAIL="$ADMIN_EMAIL_INPUT"
  fi
fi

# Verify SSH key exists
if [ ! -f "$(eval echo $SSH_KEY_PATH)" ]; then
  echo "Warning: SSH private key not found at $SSH_KEY_PATH"
  read -p "Please provide the path to your SSH private key: " NEW_SSH_KEY_PATH
  if [ ! -z "$NEW_SSH_KEY_PATH" ] && [ -f "$(eval echo $NEW_SSH_KEY_PATH)" ]; then
    SSH_KEY_PATH="$NEW_SSH_KEY_PATH"
  else
    echo "Error: Valid SSH private key path is required for provisioning."
    exit 1
  fi
fi

# Get database information
echo "Getting database connection information..."

# Get connection strings
POSTGRES_CONNECTION=$(doctl databases connection $POSTGRES_DB_ID --format URI --no-header)
REDIS_CONNECTION=$(doctl databases connection $REDIS_DB_ID --format URI --no-header)

POSTGRES_HOST=$(doctl databases connection $POSTGRES_DB_ID --format Host --no-header)
REDIS_HOST=$(doctl databases connection $REDIS_DB_ID --format Host --no-header)

# Create terraform.tfvars file
cat > terraform.tfvars <<EOL
do_token = "$DO_TOKEN"
ssh_public_key = "$(cat ~/.ssh/your_ssh_key.pub)"
ssh_private_key_path = "$SSH_KEY_PATH"
environment = "$ENVIRONMENT"
region = "sfo3"
database_url = "$POSTGRES_CONNECTION"
redis_url = "$REDIS_CONNECTION"
postgres_host = "$POSTGRES_HOST"
redis_host = "$REDIS_HOST"
domain_name = "$DOMAIN"
admin_email_for_certs = "$ADMIN_EMAIL"
jwt_secret = "$JWT_SECRET"
cookie_secret = "$COOKIE_SECRET"
EOL

# Initialize and apply Terraform
terraform init
terraform plan
echo "Starting deployment for $ENVIRONMENT environment..."
terraform apply -auto-approve

# Display output
echo "Deployment completed!"
terraform output

if [ ! -z "$DOMAIN" ]; then
  echo ""
  echo "========================================================================"
  echo "IMPORTANT: DNS SETUP INFORMATION"
  echo "========================================================================"
  echo "1. Ensure your domain ($DOMAIN) uses DigitalOcean nameservers:"
  echo "   - ns1.digitalocean.com"
  echo "   - ns2.digitalocean.com"
  echo "   - ns3.digitalocean.com"
  echo ""
  echo "2. It may take some time (minutes to hours) for DNS changes to propagate."
  echo "3. Once DNS propagates, Caddy will automatically obtain HTTPS certificates."
  echo ""
  echo "Your site will be available at:"
  echo "- Admin/Backend: https://admin.$DOMAIN"
  echo "- Storefront: https://store.$DOMAIN"
  echo "========================================================================"
fi 