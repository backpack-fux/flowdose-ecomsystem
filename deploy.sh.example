#!/bin/bash

# Standard deployment script for Flowdose ecosystem
# This script handles deployment to DigitalOcean using Terraform

# Help function
function show_help {
  echo "Usage: ./deploy.sh [options]"
  echo "Options:"
  echo "  -e, --environment ENV    Set environment (staging or production) [default: production]"
  echo "  -t, --token TOKEN        DigitalOcean API token [required]"
  echo "  -d, --domain DOMAIN      Domain name"
  echo "  -k, --ssh-key PATH       Path to SSH public key [default: ~/.ssh/flowdose-do.pub]"
  echo "  -r, --region REGION      DigitalOcean region [default: sfo3]"
  echo "  -h, --help               Display this help message"
  exit 0
}

# Error handling function
function error_exit {
  echo "ERROR: $1" >&2
  exit 1
}

# Default values
ENVIRONMENT="production"
SSH_KEY_PATH="$HOME/.ssh/flowdose-do.pub"
REGION="sfo3"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -e|--environment)
      ENVIRONMENT="$2"
      shift 2
      ;;
    -t|--token)
      DO_TOKEN="$2"
      shift 2
      ;;
    -d|--domain)
      DOMAIN="$2"
      shift 2
      ;;
    -k|--ssh-key)
      SSH_KEY_PATH="$2"
      shift 2
      ;;
    -r|--region)
      REGION="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      ;;
    *)
      error_exit "Unknown option: $1"
      ;;
  esac
done

# Check required parameters
if [ -z "$DO_TOKEN" ]; then
  error_exit "DigitalOcean API token is required. Use -t or --token."
fi

# Check and export DO token for doctl commands
export DIGITALOCEAN_ACCESS_TOKEN="$DO_TOKEN"

# Check SSH key
if [ ! -f "$SSH_KEY_PATH" ]; then
  error_exit "SSH public key file not found at $SSH_KEY_PATH"
fi

SSH_PUBLIC_KEY=$(cat "$SSH_KEY_PATH")

# Validate environment
if [[ "$ENVIRONMENT" != "production" && "$ENVIRONMENT" != "staging" ]]; then
  error_exit "Environment must be either 'staging' or 'production'"
fi

echo "==== Flowdose Deployment ($ENVIRONMENT) ===="
echo "Region: $REGION"
echo "Domain: ${DOMAIN:-'Not specified'}"

# Get database information
echo "Getting database connection information..."

# Set the prefix for database names based on environment
DB_PREFIX="flowdose"
if [ "$ENVIRONMENT" = "staging" ]; then
  DB_PREFIX="flowdose-staging"
fi

echo "Looking for PostgreSQL database (prefix: $DB_PREFIX)..."
POSTGRES_DB_ID=$(doctl databases list --format ID,Name --no-header | grep "$DB_PREFIX" | grep postgres | awk '{print $1}')
if [ -z "$POSTGRES_DB_ID" ]; then
  error_exit "PostgreSQL database not found. Please create one with a name containing '$DB_PREFIX' and 'postgres'."
fi
echo "Found PostgreSQL database: $POSTGRES_DB_ID"

echo "Looking for Redis database (prefix: $DB_PREFIX)..."
REDIS_DB_ID=$(doctl databases list --format ID,Name --no-header | grep "$DB_PREFIX" | grep redis | awk '{print $1}')
if [ -z "$REDIS_DB_ID" ]; then
  error_exit "Redis database not found. Please create one with a name containing '$DB_PREFIX' and 'redis'."
fi
echo "Found Redis database: $REDIS_DB_ID"

# Get connection strings
echo "Getting database connection strings..."
POSTGRES_CONNECTION=$(doctl databases connection $POSTGRES_DB_ID --format URI --no-header)
REDIS_CONNECTION=$(doctl databases connection $REDIS_DB_ID --format URI --no-header)

POSTGRES_HOST=$(doctl databases connection $POSTGRES_DB_ID --format Host --no-header)
REDIS_HOST=$(doctl databases connection $REDIS_DB_ID --format Host --no-header)

echo "Database connections retrieved successfully."

# Create terraform.tfvars file
echo "Creating Terraform variables file..."
cat > terraform.tfvars <<EOL
do_token = "$DO_TOKEN"
environment = "$ENVIRONMENT"
region = "$REGION"
database_url = "$POSTGRES_CONNECTION"
redis_url = "$REDIS_CONNECTION"
postgres_host = "$POSTGRES_HOST"
redis_host = "$REDIS_HOST"
domain_name = "$DOMAIN"
ssh_public_key = "$SSH_PUBLIC_KEY"
EOL
echo "Terraform variables file created."

# Initialize and apply Terraform
echo "Initializing Terraform..."
terraform init || error_exit "Terraform initialization failed"

echo "Planning deployment..."
terraform plan || error_exit "Terraform plan failed"

echo "Starting deployment for $ENVIRONMENT environment..."
terraform apply -auto-approve

# Check if Terraform apply was successful
if [ $? -eq 0 ]; then
  echo "==== Deployment completed successfully! ===="
  terraform output
else
  error_exit "Terraform apply failed"
fi 