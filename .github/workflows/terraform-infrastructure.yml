name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - master
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  pull-requests: write

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}

jobs:
  terraform:
    name: "Terraform Infrastructure"
    runs-on: ubuntu-latest
    
    # Use a timeout to avoid excessive workflow minutes
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Configure Terraform Credentials
        run: |
          cat > ~/.terraformrc <<EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF
          mkdir -p terraform
      
      - name: Debug Environment Variables
        run: |
          echo "Checking secret availability (will not print values)..."
          if [ -n "$DO_API_TOKEN" ]; then echo "DO_API_TOKEN is available"; else echo "DO_API_TOKEN is missing"; fi
          if [ -n "$DO_SSH_PUBLIC_KEY" ]; then echo "DO_SSH_PUBLIC_KEY is available"; else echo "DO_SSH_PUBLIC_KEY is missing"; fi
          if [ -n "$DO_SPACES_ACCESS_KEY" ]; then echo "DO_SPACES_ACCESS_KEY is available"; else echo "DO_SPACES_ACCESS_KEY is missing"; fi
          if [ -n "$DO_SPACES_SECRET_KEY" ]; then echo "DO_SPACES_SECRET_KEY is available"; else echo "DO_SPACES_SECRET_KEY is missing"; fi
          
          # Show DigitalOcean account info
          if [ -n "$DO_API_TOKEN" ]; then
            echo "Testing DigitalOcean API access..."
            curl -s -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DO_API_TOKEN" \
              "https://api.digitalocean.com/v2/account" | jq '.account.email' || echo "Failed to access DO API"
            
            echo "Checking SSH keys in DO account..."
            curl -s -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DO_API_TOKEN" \
              "https://api.digitalocean.com/v2/account/keys" | jq '.meta.total + " SSH keys found"' || echo "Failed to get SSH keys"
          fi
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          DO_SSH_PUBLIC_KEY: ${{ secrets.DO_SSH_PUBLIC_KEY }}
          DO_SPACES_ACCESS_KEY: ${{ secrets.DO_SPACES_ACCESS_KEY }}
          DO_SPACES_SECRET_KEY: ${{ secrets.DO_SPACES_SECRET_KEY }}
      
      - name: Configure SSH Keys
        run: |
          # Create a directory for SSH keys
          mkdir -p ~/.ssh
          
          # Generate a SSH key pair without passphrase for Terraform
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/terraform_deploy_key -N '' -C "terraform-deploy-key"
          
          # Set permissions
          chmod 600 ~/.ssh/terraform_deploy_key*
          
          # Output public key info (safe to show)
          echo "SSH public key generated:"
          ssh-keygen -lf ~/.ssh/terraform_deploy_key.pub
          
          # Set as environment variable for Terraform
          echo "TF_VAR_ssh_public_key=$(cat ~/.ssh/terraform_deploy_key.pub)" >> $GITHUB_ENV
      
      - name: Terraform Format
        id: fmt
        run: |
          # Format the Terraform files instead of just checking
          terraform fmt -recursive
          echo "Terraform files formatted successfully"
        working-directory: terraform
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="access_key=${{ secrets.DO_SPACES_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.DO_SPACES_SECRET_KEY }}"
        working-directory: terraform
        env:
          TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
          TF_VAR_ssh_public_key: ${{ secrets.DO_SSH_PUBLIC_KEY }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: terraform
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color
        working-directory: terraform
        env:
          TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
          # SSH key is now set via GITHUB_ENV in the Configure SSH Keys step
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_cookie_secret: ${{ secrets.COOKIE_SECRET }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_redis_url: ${{ secrets.REDIS_URL }}
          TF_VAR_postgres_host: ${{ secrets.POSTGRES_HOST }}
          TF_VAR_redis_host: ${{ secrets.REDIS_HOST }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
          TF_VAR_publishable_key: ${{ secrets.PUBLISHABLE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        continue-on-error: true
      
      - name: Update PR with Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Run ID: ${{ github.run_id }}*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        run: terraform apply -auto-approve -input=false
        working-directory: terraform
        env:
          TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
          # SSH key is now set via GITHUB_ENV in the Configure SSH Keys step
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_cookie_secret: ${{ secrets.COOKIE_SECRET }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_redis_url: ${{ secrets.REDIS_URL }}
          TF_VAR_postgres_host: ${{ secrets.POSTGRES_HOST }}
          TF_VAR_redis_host: ${{ secrets.REDIS_HOST }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
          TF_VAR_publishable_key: ${{ secrets.PUBLISHABLE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      - name: Output Infrastructure Info
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        id: terraform_output
        run: |
          # Check if terraform has been applied successfully
          if ! terraform state list &> /dev/null; then
            echo "No Terraform state found or state is empty. Skipping output extraction."
            exit 0
          fi
          
          # Use a more robust approach to extract IPs from Terraform output
          # Check if the outputs exist first
          if terraform output -json &> /dev/null; then
            # Outputs exist, extract the IPs
            echo "Extracting IPs from Terraform output..."
            BACKEND_IP=$(terraform output -json 2>/dev/null | jq -r '.backend_ip.value // empty' 2>/dev/null | grep -o '^[0-9\.]*' || echo "")
            STOREFRONT_IP=$(terraform output -json 2>/dev/null | jq -r '.storefront_ip.value // empty' 2>/dev/null | grep -o '^[0-9\.]*' || echo "")
            
            echo "Extracted Backend IP: $BACKEND_IP"
            echo "Extracted Storefront IP: $STOREFRONT_IP"
            
            # Set environment variables for later steps if values were found
            if [ -n "$BACKEND_IP" ]; then
              echo "BACKEND_IP=$BACKEND_IP" >> $GITHUB_ENV
            fi
            
            if [ -n "$STOREFRONT_IP" ]; then
              echo "STOREFRONT_IP=$STOREFRONT_IP" >> $GITHUB_ENV
            fi
          else
            echo "No Terraform outputs available yet."
          fi
        working-directory: terraform
        continue-on-error: true

      - name: Save IPs to Deployment Environment
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        run: |
          # Check if IPs were extracted successfully
          if [ -n "$BACKEND_IP" ] && [ -n "$STOREFRONT_IP" ]; then
            echo "Setting outputs with IPs for downstream jobs"
            echo "backend_ip=$BACKEND_IP" >> $GITHUB_OUTPUT
            echo "storefront_ip=$STOREFRONT_IP" >> $GITHUB_OUTPUT
            echo "IPs saved to deployment environment successfully"
          else
            echo "Warning: One or both IP addresses not available, skipping output setting"
            # Set default values to avoid downstream failures
            echo "backend_ip=pending" >> $GITHUB_OUTPUT
            echo "storefront_ip=pending" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Save IPs to Repository Variables
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        uses: actions/github-script@v6
        env:
          BACKEND_IP: ${{ env.BACKEND_IP }}
          STOREFRONT_IP: ${{ env.STOREFRONT_IP }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the IPs from environment
            const backendIP = process.env.BACKEND_IP || '';
            const storefrontIP = process.env.STOREFRONT_IP || '';
            
            if (!backendIP || !storefrontIP) {
              console.log('No IP addresses found to save to repository variables');
              return;
            }
            
            // Save to repository variables
            console.log(`Saving Backend IP: ${backendIP}`);
            console.log(`Saving Storefront IP: ${storefrontIP}`);
            
            // Set variables using REST API
            try {
              // First, get existing variables
              const { data: existingVars } = await github.rest.actions.listRepoVariables({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Check if variables exist and update them
              const backendVarExists = existingVars.variables.some(v => v.name === 'BACKEND_IP');
              const storefrontVarExists = existingVars.variables.some(v => v.name === 'STOREFRONT_IP');
              
              if (backendVarExists) {
                await github.rest.actions.updateRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'BACKEND_IP',
                  value: backendIP
                });
              } else {
                await github.rest.actions.createRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'BACKEND_IP',
                  value: backendIP
                });
              }
              
              if (storefrontVarExists) {
                await github.rest.actions.updateRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'STOREFRONT_IP',
                  value: storefrontIP
                });
              } else {
                await github.rest.actions.createRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'STOREFRONT_IP',
                  value: storefrontIP
                });
              }
              
              console.log('Repository variables updated successfully');
            } catch (error) {
              console.error('Error updating repository variables:', error);
            }
        continue-on-error: true

      - name: Display Infrastructure Details
        if: always() && !cancelled() && github.ref == 'refs/heads/master'
        run: |
          echo "========================================"
          echo "Infrastructure Deployment Information"
          echo "========================================"
          
          # Try to get the output values from Terraform state
          echo "Getting Terraform outputs..."
          terraform output || echo "Failed to get Terraform outputs"
          
          # Try to get the droplet IPs directly from DO
          echo "Getting droplet information from DigitalOcean..."
          curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DO_API_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?page=1&per_page=10" | \
            jq '.droplets[] | {name, id, status, ip: .networks.v4[0].ip_address}'
          
          echo "========================================"
          echo "Infrastructure deployment completed."
          echo "Check the logs above for any issues."
          echo "========================================"
        working-directory: terraform 